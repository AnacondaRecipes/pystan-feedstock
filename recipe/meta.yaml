{% set name = "pystan" %}
{% set version = "3.10.0" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 2e6c1cdbec8b2769f134b35a19e59e6655074da0c2f807af78dc310a99a8eb79

build:
  number: 0
  # Upstream does not support python 3.13 due to an outdated pinning of pysimdjson
  skip: true  # [unix or (py<310 or py>=313)]
  detect_binary_files_with_prefix: False
  script:
    - {{ PYTHON }} -m pip install . --no-build-isolation --no-deps
    # Patch httpstan's services_stub.py to handle Windows multiprocessing
    # Windows doesn't support 'fork' context, so we need to use the default 'spawn' context
    # This patch is applied during build to ensure the package is built correctly
    - |
      if "%CONDA_BUILD_CROSS_COMPILATION%" == "1" (
        echo "import sys, concurrent.futures, multiprocessing as mp" > %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "def init_worker():" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "    signal.signal(signal.SIGINT, signal.SIG_IGN)" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "if sys.platform == 'win32':" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "    executor = concurrent.futures.ProcessPoolExecutor(initializer=init_worker)" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "else:" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "    executor = concurrent.futures.ProcessPoolExecutor(mp_context=mp.get_context('fork'), initializer=init_worker)" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
      )

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  host:
    - python
    - pip
    - setuptools
    - poetry-core >=1.0.0
  run:
    - python
    - aiohttp >=3.6,<4.0
    - httpstan >=4.13,<5.0
    - pysimdjson >=5.0.2,<7
    - numpy >=1.19
    - clikit >=0.6,<1.0
    - setuptools

test:
  commands:
    - |
      if "%CONDA_BUILD_CROSS_COMPILATION%" == "1" (
        echo "import sys, concurrent.futures, multiprocessing as mp" > %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "def init_worker():" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "    signal.signal(signal.SIGINT, signal.SIG_IGN)" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "if sys.platform == 'win32':" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "    executor = concurrent.futures.ProcessPoolExecutor(initializer=init_worker)" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "else:" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
        echo "    executor = concurrent.futures.ProcessPoolExecutor(mp_context=mp.get_context('fork'), initializer=init_worker)" >> %PREFIX%\Lib\site-packages\httpstan\services_stub.py
      )
    - python -c "import httpstan.services_stub; print('Patch verified')"
    - pip check
  imports:
    - stan
    - stan.common
    - stan.fit
    - stan.model
    - stan.plugins
  requires:
    - pip

about:
  home: https://mc-stan.org/interfaces/pystan.html
  license: GPL-3.0-only
  license_file: LICENSE
  license_family: GPL
  summary: Python interface to Stan, a package for Bayesian inference
  description: |
    PyStan provides a Python interface to Stan, a package for Bayesian
    inference using the No-U-Turn sampler, a variant of Hamiltonian Monte
    Carlo.
  doc_url: https://pystan.readthedocs.org/
  dev_url: https://github.com/stan-dev/pystan

extra:
  recipe-maintainers:
    - rmax
